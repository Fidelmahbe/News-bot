const axios = require("axios");
const { Telegraf } = require("telegraf");
const { parseStringPromise } = require("xml2js");
const { GoogleGenerativeAI } = require("@google/generative-ai");

// L·∫•y secrets t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const TELEGRAM_CHANNEL = process.env.TELEGRAM_CHANNEL;
const NEWS_API_KEY = process.env.NEWS_API_KEY;
const NEWSDATA_API_KEY = process.env.NEWSDATA_API_KEY;
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;

const bot = new Telegraf(TELEGRAM_TOKEN);

// Kh·ªüi t·∫°o Gemini API
const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

// API URLs
const NEWS_API_URL = `https://newsapi.org/v2/everything?q=cryptocurrency&apiKey=${NEWS_API_KEY}&pageSize=10`;
const NEWSDATA_API_URL = `https://api.newsdata.io/v2/news?apikey=${NEWSDATA_API_KEY}&q=cryptocurrency&language=en&limit=10`;
const COINDESK_RSS_URL = "https://www.coindesk.com/arc/outboundfeeds/rss";
const CRYPTO_NEWS_RSS_URL = "https://crypto.news/feed/";
const COINTELEGRAPH_RSS_URL = "https://cointelegraph.com/rss";

// L·∫•y tin t·ª©c t·ª´ NewsAPI
async function fetchNewsFromNewsAPI() {
  try {
    const response = await axios.get(NEWS_API_URL);
    return response.data.articles
      .map(article => ({
        title: article.title,
        description: article.description || article.content,
        image_url: article.urlToImage,
        source_id: article.source.name,
      }))
      .filter(article => article.description && article.description.length > 50);
  } catch (error) {
    console.error("Error fetching NewsAPI:", error.message);
    return [];
  }
}

// L·∫•y tin t·ª©c t·ª´ newsdata.io
async function fetchNewsFromNewsData() {
  try {
    const response = await axios.get(NEWSDATA_API_URL);
    return response.data.results
      .map(article => ({
        title: article.title,
        description: article.description,
        image_url: article.image_url,
        source_id: article.source_id,
      }))
      .filter(article => article.description && article.description.length > 50);
  } catch (error) {
    console.error("Error fetching newsdata.io:", error.message);
    return [];
  }
}

// L·∫•y tin t·ª©c t·ª´ CoinDesk RSS
async function fetchNewsFromCoinDesk() {
  try {
    const response = await axios.get(COINDESK_RSS_URL);
    const xml = response.data;
    const result = await parseStringPromise(xml);
    const items = result.rss.channel[0].item || [];
    return items
      .map(item => ({
        title: item.title[0],
        description: item.description[0],
        image_url: item["media:thumbnail"]?.[0]?.$.url || null,
        source_id: "CoinDesk",
      }))
      .filter(article => article.description && article.description.length > 50);
  } catch (error) {
    console.error("Error fetching CoinDesk RSS:", error.message);
    return [];
  }
}

// L·∫•y tin t·ª©c t·ª´ Crypto News RSS
async function fetchNewsFromCryptoNews() {
  try {
    const response = await axios.get(CRYPTO_NEWS_RSS_URL);
    const xml = response.data;
    const result = await parseStringPromise(xml);
    const items = result.rss.channel[0].item || [];
    return items
      .map(item => ({
        title: item.title[0],
        description: item.description[0],
        image_url: item["media:content"]?.[0]?.$.url || null,
        source_id: "Crypto News",
      }))
      .filter(article => article.description && article.description.length > 50);
  } catch (error) {
    console.error("Error fetching Crypto News RSS:", error.message);
    return [];
  }
}

// L·∫•y tin t·ª©c t·ª´ Cointelegraph RSS
async function fetchNewsFromCointelegraph() {
  try {
    const response = await axios.get(COINTELEGRAPH_RSS_URL);
    const xml = response.data;
    const result = await parseStringPromise(xml);
    const items = result.rss.channel[0].item || [];
    return items
      .map(item => ({
        title: item.title[0],
        description: item.description[0],
        image_url: item["media:thumbnail"]?.[0]?.$.url || null,
        source_id: "Cointelegraph",
      }))
      .filter(article => article.description && article.description.length > 50);
  } catch (error) {
    console.error("Error fetching Cointelegraph RSS:", error.message);
    return [];
  }
}

// L·∫•y tin t·ª©c v·ªõi chi·∫øn l∆∞·ª£c fallback v√† ch·ªçn 1 tin h·∫•p d·∫´n nh·∫•t
async function fetchCryptoNews() {
  let articles = await fetchNewsFromNewsAPI();
  if (articles.length) return [articles.reduce((max, current) => (current.description.length > max.description.length ? current : max), articles[0])];

  articles = await fetchNewsFromNewsData();
  if (articles.length) return [articles.reduce((max, current) => (current.description.length > max.description.length ? current : max), articles[0])];

  articles = await fetchNewsFromCoinDesk();
  if (articles.length) return [articles.reduce((max, current) => (current.description.length > max.description.length ? current : max), articles[0])];

  articles = await fetchNewsFromCryptoNews();
  if (articles.length) return [articles.reduce((max, current) => (current.description.length > max.description.length ? current : max), articles[0])];

  articles = await fetchNewsFromCointelegraph();
  if (articles.length) return [articles.reduce((max, current) => (current.description.length > max.description.length ? current : max), articles[0])];

  return [];
}

// S·ª≠ d·ª•ng Gemini API ƒë·ªÉ t√≥m t·∫Øt v√† ƒë·ªãnh d·∫°ng
async function processWithAI(article) {
  const prompt = `
  T√≥m t·∫Øt b√†i tin t·ª©c sau m·ªôt c√°ch ng·∫Øn g·ªçn, h·∫•p d·∫´n v√† t·ª± nhi√™n b·∫±ng ti·∫øng Vi·ªát:
  Ti√™u ƒë·ªÅ: ${article.title || "Kh√¥ng c√≥ ti√™u ƒë·ªÅ"}
  M√¥ t·∫£: ${article.description || "Kh√¥ng c√≥ m√¥ t·∫£"}

  ƒê·ªãnh d·∫°ng ƒë·∫ßu ra:
  - Ti√™u ƒë·ªÅ: [Ti√™u ƒë·ªÅ g·ªëc]
  - T√≥m t·∫Øt: [T√≥m t·∫Øt ng·∫Øn g·ªçn, t·ªëi ƒëa 2 c√¢u, nh·∫•n m·∫°nh ƒëi·ªÉm n·ªïi b·∫≠t]
  - Ngu·ªìn: [source_id]
  `;

  try {
    const result = await model.generateContent(prompt);
    const response = result.response.text();
    const [titleLine, summaryLine, sourceLine] = response.split("\n").map(line => line.replace(/^- /, "").trim());

    return {
      title: titleLine.replace("Ti√™u ƒë·ªÅ: ", "").trim(),
      summary: summaryLine.replace("T√≥m t·∫Øt: ", "").trim(),
      source: sourceLine.replace("Ngu·ªìn: ", "").trim() || article.source_id || "Ngu·ªìn kh√¥ng r√µ",
    };
  } catch (error) {
    console.error("Error with Gemini AI:", error.message);
    return {
      title: article.title || "Kh√¥ng c√≥ ti√™u ƒë·ªÅ",
      summary: article.description || "Kh√¥ng c√≥ m√¥ t·∫£",
      source: article.source_id || "Ngu·ªìn kh√¥ng r√µ",
    };
  }
}

// G·ª≠i 1 tin v·ªõi ·∫£nh
async function sendNews() {
  const articles = await fetchCryptoNews();
  if (!articles.length) {
    await bot.telegram.sendMessage(TELEGRAM_CHANNEL, "Kh√¥ng th·ªÉ l·∫•y tin t·ª©c t·ª´ b·∫•t k·ª≥ ngu·ªìn n√†o.");
    return;
  }

  const article = articles[0]; // Ch·ªâ l·∫•y 1 tin h·∫•p d·∫´n nh·∫•t
  const updateTime = new Date().toLocaleString("vi-VN", { timeZone: "Asia/Ho_Chi_Minh" });
  const processed = await processWithAI(article);

  // ƒê·ªãnh d·∫°ng tin nh·∫Øn v·ªõi HTML
  const defaultImageUrl = "https://ik.imagekit.io/s0jjvjav7h/2151072976.jpg?updatedAt=1741248488016";
  const imageUrl = article.image_url || defaultImageUrl;

  const message = `
<b>RadioSignal News Day - ${updateTime}</b>
<b>üìä:</b> ${processed.title}
<b>Description:</b> ${processed.summary}
<b>Source:</b> ${processed.source}

<a href="${imageUrl}">·∫¢nh minh h·ªça</a>`;

  try {
    if (article.image_url) {
      await bot.telegram.sendPhoto(TELEGRAM_CHANNEL, article.image_url, {
        caption: message,
        parse_mode: "HTML",
      });
    } else {
      await bot.telegram.sendMessage(TELEGRAM_CHANNEL, message, { parse_mode: "HTML" });
    }
  } catch (error) {
    console.error("Error sending message:", error.message);
    await bot.telegram.sendMessage(TELEGRAM_CHANNEL, "L·ªói khi g·ª≠i tin t·ª©c. Vui l√≤ng ki·ªÉm tra log.");
  }
}

// Ch·∫°y ch·ª©c nƒÉng
const task = process.argv[2];
if (task === "news") sendNews();
else console.log("Vui l√≤ng ch·ªçn 'news'");